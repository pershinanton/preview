
@Database(
    entities = [
        OrderEntity::class,
        OrderArchiveEntity::class,
        ShiftEntity::class,
        ResearchEntity::class
    ],
    version = 1,
    exportSchema = false
)
@TypeConverters(Converters::class)
abstract class AppDatabase : RoomDatabase() {

    abstract fun getOrderDAO(): OrderDAO

    abstract fun getOrderArchiveDAO(): OrderArchiveDAO

    abstract fun getShiftDAO(): ShiftDAO

    abstract fun getResearchDAO(): ResearchDAO

    companion object {
        const val DB_NAME = "app.db"

        @Volatile
        private var INSTANCE: AppDatabase? = null

        fun getInstance(context: Context): AppDatabase {
            synchronized(this) {
                var instance = INSTANCE
                if (instance == null) {
                    instance = Room.databaseBuilder(
                        context.applicationContext,
                        AppDatabase::class.java,
                        DB_NAME
                    )
                        .fallbackToDestructiveMigration()
                        .build()
                    INSTANCE = instance
                }
                return instance
            }
        }

    }
}
